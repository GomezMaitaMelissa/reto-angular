{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AlphabetNumericOnlyDirective {\n  onInputChange(event) {\n    const input = event.target;\n    const sanitized = input.value.replace(/[^0-9a-zA-Z ]*/g, '');\n    input.value = sanitized;\n  }\n  onPaste(event) {\n    event.preventDefault();\n    const input = event.target;\n    input.value = '';\n  }\n  static #_ = this.ɵfac = function AlphabetNumericOnlyDirective_Factory(t) {\n    return new (t || AlphabetNumericOnlyDirective)();\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AlphabetNumericOnlyDirective,\n    selectors: [[\"\", \"alphabetNumericOnly\", \"\"]],\n    hostBindings: function AlphabetNumericOnlyDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function AlphabetNumericOnlyDirective_input_HostBindingHandler($event) {\n          return ctx.onInputChange($event);\n        })(\"paste\", function AlphabetNumericOnlyDirective_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        });\n      }\n    }\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,4BAA4B;EAEvCC,aAAa,CAACC,KAAoB;IAChC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9C,MAAMC,SAAS,GAAGF,KAAK,CAACG,KAAK,CAACC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;IAE5DJ,KAAK,CAACG,KAAK,GAAGD,SAAS;EACzB;EAGAG,OAAO,CAACN,KAAqB;IAC3BA,KAAK,CAACO,cAAc,EAAE;IACtB,MAAMN,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9CD,KAAK,CAACG,KAAK,GAAG,EAAE;EAClB;EAAC;qBAdUN,4BAA4B;EAAA;EAAA;UAA5BA,4BAA4B;IAAAU;IAAAC;MAAA;;iBAA5BC,yBAAqB;QAAA;UAAA,OAArBA,mBAAe;QAAA","names":["AlphabetNumericOnlyDirective","onInputChange","event","input","target","sanitized","value","replace","onPaste","preventDefault","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\Users\\USUARIO\\reto-angular\\src\\app\\commons\\directives\\alphanumeric-only.directive.ts"],"sourcesContent":["import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[alphabetNumericOnly]',\n})\nexport class AlphabetNumericOnlyDirective {\n  @HostListener('input', ['$event'])\n  onInputChange(event: KeyboardEvent) {\n    const input = event.target as HTMLInputElement;\n    const sanitized = input.value.replace(/[^0-9a-zA-Z ]*/g, '');\n\n    input.value = sanitized;\n  }\n\n  @HostListener('paste', ['$event'])\n  onPaste(event: ClipboardEvent) {\n    event.preventDefault();\n    const input = event.target as HTMLInputElement;\n    input.value = '';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}